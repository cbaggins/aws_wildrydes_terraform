AWSTemplateFormatVersion: 2010-09-09

Resources:
  Bucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      WebsiteConfiguration:
        IndexDocument: index.html      

  S3Policy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref Bucket
      PolicyDocument: 
        Statement: 
          - 
            Action: 
              - "s3:GetObject"
            Effect: "Allow"
            Resource: 
              Fn::Join: 
                - ""
                - 
                  - "arn:aws:s3:::"
                  - 
                    Ref: "Bucket"
                  - "/*"
            Principal: "*"

  DynamoDB:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: RideId
          AttributeType: S 
      BillingMode: PROVISIONED
      KeySchema:
        - AttributeName: RideId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 20
        WriteCapacityUnits: 20
      TableName: Rides

  IAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement: 
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Description: "WildRydes Lambda Role"
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action:
                  - dynamodb:PutItem*
                Resource:
                  - !GetAtt DynamoDB.Arn
          PolicyName: DynamoDBWriteAccess
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      RoleName: WildRydesLambda

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile:  |
            const randomBytes = require('crypto').randomBytes;

            const AWS = require('aws-sdk');

            const ddb = new AWS.DynamoDB.DocumentClient();

            const fleet = [
                {
                    Name: 'Bucephalus',
                    Color: 'Golden',
                    Gender: 'Male',
                },
                {
                    Name: 'Shadowfax',
                    Color: 'White',
                    Gender: 'Male',
                },
                {
                    Name: 'Rocinante',
                    Color: 'Yellow',
                    Gender: 'Female',
                },
            ];

            exports.handler = (event, context, callback) => {
                if (!event.requestContext.authorizer) {
                  errorResponse('Authorization not configured', context.awsRequestId, callback);
                  return;
                }

                const rideId = toUrlString(randomBytes(16));
                console.log('Received event (', rideId, '): ', event);

                // Because we're using a Cognito User Pools authorizer, all of the claims
                // included in the authentication token are provided in the request context.
                // This includes the username as well as other attributes.
                const username = event.requestContext.authorizer.claims['cognito:username'];

                // The body field of the event in a proxy integration is a raw string.
                // In order to extract meaningful values, we need to first parse this string
                // into an object. A more robust implementation might inspect the Content-Type
                // header first and use a different parsing strategy based on that value.
                const requestBody = JSON.parse(event.body);

                const pickupLocation = requestBody.PickupLocation;

                const unicorn = findUnicorn(pickupLocation);

                recordRide(rideId, username, unicorn).then(() => {
                    // You can use the callback function to provide a return value from your Node.js
                    // Lambda functions. The first parameter is used for failed invocations. The
                    // second parameter specifies the result data of the invocation.

                    // Because this Lambda function is called by an API Gateway proxy integration
                    // the result object must use the following structure.
                    callback(null, {
                        statusCode: 201,
                        body: JSON.stringify({
                            RideId: rideId,
                            Unicorn: unicorn,
                            UnicornName: unicorn.Name,
                            Eta: '30 seconds',
                            Rider: username,
                        }),
                        headers: {
                            'Access-Control-Allow-Origin': '*',
                        },
                    });
                }).catch((err) => {
                    console.error(err);

                    // If there is an error during processing, catch it and return
                    // from the Lambda function successfully. Specify a 500 HTTP status
                    // code and provide an error message in the body. This will provide a
                    // more meaningful error response to the end client.
                    errorResponse(err.message, context.awsRequestId, callback)
                });
            };

            // This is where you would implement logic to find the optimal unicorn for
            // this ride (possibly invoking another Lambda function as a microservice.)
            // For simplicity, we'll just pick a unicorn at random.
            function findUnicorn(pickupLocation) {
                console.log('Finding unicorn for ', pickupLocation.Latitude, ', ', pickupLocation.Longitude);
                return fleet[Math.floor(Math.random() * fleet.length)];
            }

            function recordRide(rideId, username, unicorn) {
                return ddb.put({
                    TableName: 'Rides',
                    Item: {
                        RideId: rideId,
                        User: username,
                        Unicorn: unicorn,
                        UnicornName: unicorn.Name,
                        RequestTime: new Date().toISOString(),
                    },
                }).promise();
            }

            function toUrlString(buffer) {
                return buffer.toString('base64')
                    .replace(/\+/g, '-')
                    .replace(/\//g, '_')
                    .replace(/=/g, '');
            }

            function errorResponse(errorMessage, awsRequestId, callback) {
              callback(null, {
                statusCode: 500,
                body: JSON.stringify({
                  Error: errorMessage,
                  Reference: awsRequestId,
                }),
                headers: {
                  'Access-Control-Allow-Origin': '*',
                },
              });
            }

      FunctionName: RequestUnicorn
      Handler: index.handler
      Role: !GetAtt IAMRole.Arn
      Runtime: nodejs10.x
      TracingConfig:
        Mode: Active #allows x-ray tracing

  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AutoVerifiedAttributes:
        - email
    
  CognitoClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref CognitoUserPool
    
  GatewayAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: WildRydes
      EndpointConfiguration:
        Types:
          - EDGE
    
  GatewayAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      IdentitySource: method.request.header.Authorization #otherwise wont create
      Name: WildRydes
      ProviderARNs:
        - !GetAtt CognitoUserPool.Arn
      RestApiId: !Ref GatewayAPI
      Type: COGNITO_USER_POOLS

  GatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt GatewayAPI.RootResourceId #required
      PathPart: ride #required
      RestApiId: !Ref GatewayAPI #required
        
  GatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref GatewayAuthorizer
      HttpMethod: POST
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: 200
      ResourceId: !Ref GatewayResource #required
      RestApiId: !Ref GatewayAPI #required

  CORSMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
            StatusCode: 200
        PassthroughBehavior: NEVER
        RequestTemplates: 
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: 200
      ResourceId: !Ref GatewayResource #required
      RestApiId: !Ref GatewayAPI #required
    
  GatewayDeployment:
    DependsOn: #need them before gateway can be deployed!
      - GatewayMethod
      - CORSMethod
    Type: AWS::ApiGateway::Deployment
    Properties:
      StageName: prod
      RestApiId: !Ref GatewayAPI
    
  LambdaPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${GatewayAPI}/*/POST/ride"

Outputs:
  UserPool:
    Value: !Ref CognitoUserPool
  
  UserPoolClient:
    Value: !Ref CognitoClient

  AWSRegion:
    Value: !Sub ${AWS::Region}
  
  APIInvokeUri:
    Value: !Sub "https://${GatewayAPI}.execute-api.${AWS::Region}.amazonaws.com/prod"
  
  BucketURL:
    Value: !GetAtt Bucket.WebsiteURL